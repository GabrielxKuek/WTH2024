#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <EEPROM.h>
#include <SPI.h>
#include <MFRC522.h>
#include <math.h>

// Display definitions
#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64
#define OLED_RESET -1
#define SINGLE_SCREEN_LENGTH 21
#define SINGLE_SCREEN_HEIGHT 6

// Joystick pins and thresholds
#define PIN_ANALOG_X 1
#define PIN_ANALOG_Y 2
#define THRESHOLD_LOW 2700
#define THRESHOLD_HIGH 2900

// Combat buttons
#define PIN_A_BUTTON 39  // Added for completeness
#define PIN_B_BUTTON 40  // Quick Attack
#define PIN_C_BUTTON 41  // Parry
#define PIN_D_BUTTON 42  // Heavy Attack

// RFID pins
#define RST_PIN 9
#define SS_PIN 10

// Game state enumeration
enum GameState {
  MAIN_MENU,
  STATS_MENU,
  BATTLE_MENU,
  IN_BATTLE
};

// Create two Wire instances for the two I2C buses
TwoWire I2Cleft = TwoWire(0);
TwoWire I2Cright = TwoWire(1);

// Initialize displays
Adafruit_SSD1306 displayLeft(SCREEN_WIDTH, SCREEN_HEIGHT, &I2Cleft, OLED_RESET);
Adafruit_SSD1306 displayRight(SCREEN_WIDTH, SCREEN_HEIGHT, &I2Cright, OLED_RESET);

// Initialize RFID
MFRC522 mfrc522(SS_PIN, RST_PIN);
MFRC522::MIFARE_Key key;

// Game structures
struct Character {
  int health;
  int attack;
};

struct Enemy {
  int health;
  int attack;
};

// Game variables
GameState currentState = MAIN_MENU;
int menuSelection = 0;
Character player = {100, 25};
Enemy enemy;
int roundNumber = 1;
int highScore = 0;
int currentScore = 0;
float goodStreak = 0, badStreak = 0;
float userStatIncrementHp = 50, userStatIncrementAtk = 10;
float streakIncrement = 0.05;

// Movement debouncing
unsigned long lastJoystickMove = 0;
const unsigned long joystickDebounceTime = 200;

void setup() {
  // Initialize I2C and displays
  I2Cleft.begin(13, 14);
  I2Cright.begin(4, 5);
  
  if(!displayLeft.begin(SSD1306_SWITCHCAPVCC, 0x3C) || 
     !displayRight.begin(SSD1306_SWITCHCAPVCC, 0x3C)) {
    Serial.println(F("SSD1306 allocation failed"));
    for(;;);
  }

  // Initialize buttons
  pinMode(PIN_A_BUTTON, INPUT_PULLUP);
  pinMode(PIN_B_BUTTON, INPUT_PULLUP);
  pinMode(PIN_C_BUTTON, INPUT_PULLUP);
  pinMode(PIN_D_BUTTON, INPUT_PULLUP);

  // Initialize RFID
  SPI.begin(11, 13, 12, 10);
  mfrc522.PCD_Init();
  for (byte i = 0; i < 6; i++) {
    key.keyByte[i] = 0xFF;
  }

  // Initialize Serial and EEPROM
  Serial.begin(115200);
  EEPROM.begin(512);
  
  // Load high score
  highScore = EEPROM.read(0);
  
  // Generate first enemy
  enemy = generateEnemy(roundNumber);
}

void loop() {
  handleJoystickNavigation();
  
  switch(currentState) {
    case MAIN_MENU:
      displayMainMenu();
      break;
    case STATS_MENU:
      displayStatsMenu();
      break;
    case BATTLE_MENU:
      displayBattleMenu();
      break;
    case IN_BATTLE:
      handleBattle();
      break;
  }
  
  // Handle RFID card reading
  handleRFIDReading();
  
  delay(50); // Small delay for stability
}

void handleJoystickNavigation() {
  if (millis() - lastJoystickMove < joystickDebounceTime) {
    return;
  }

  int xValue = analogRead(PIN_ANALOG_X);
  int yValue = analogRead(PIN_ANALOG_Y);
  
  // Vertical movement for menu selection
  if (yValue < THRESHOLD_LOW) {
    menuSelection++;
    lastJoystickMove = millis();
  } else if (yValue > THRESHOLD_HIGH) {
    menuSelection--;
    lastJoystickMove = millis();
  }
  
  // Limit menu selection based on current state
  switch(currentState) {
    case MAIN_MENU:
      menuSelection = constrain(menuSelection, 0, 1);
      break;
    case STATS_MENU:
      menuSelection = constrain(menuSelection, 0, 2);
      break;
    case BATTLE_MENU:
      menuSelection = 0; // Only one option in battle menu
      break;
  }
}

void displayMainMenu() {
  String line1 = menuSelection == 0 ? "> Play Game <" : "Play Game";
  String line2 = menuSelection == 1 ? "> Check Stats <" : "Check Stats";
  writeToDisplaysLineByLine(
    "MAIN MENU",
    line1,
    "",
    line2,
    "", 
    "Press B to select"
  );
  
  // Handle selection
  if (digitalRead(PIN_B_BUTTON) == LOW) {
    delay(50);
    currentState = menuSelection == 0 ? BATTLE_MENU : STATS_MENU;
    menuSelection = 0;
  }
}

// ... [Additional implementation of displayStatsMenu(), displayBattleMenu(), 
//      handleBattle(), handleRFIDReading(), and other necessary functions] ...

Enemy generateEnemy(int round) {
  Enemy newEnemy;
  newEnemy.health = 50 * pow(1.2, round - 1);
  newEnemy.attack = 10 * pow(1.1, round - 1);
  return newEnemy;
}

void writeToDisplaysLineByLine(String line1, String line2, String line3, 
                             String line4, String line5, String line6) {
  // ... [Keep existing implementation from Menu.ino] ...
}
